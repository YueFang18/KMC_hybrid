/*
 * ODE part
 */
#include <cstdio>
#include<iomanip>
#include<stdlib.h>
#include<vector>
#include<math.h>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<iterator>

#include <utility>
#include <boost/numeric/odeint.hpp>
#include <boost/phoenix/core.hpp>
#include <boost/phoenix/core.hpp>
#include <boost/phoenix/operator.hpp>

using namespace std;
using namespace boost::numeric::odeint;
namespace phoenix = boost::phoenix;

//[ stiff_system_definition
typedef boost::numeric::ublas::vector<double> vector_type;
typedef boost::numeric::ublas::matrix<double> matrix_type;


double k[57] =
    {1.55482e-06, 28202.9, 640.252, 28202.9, 80780.3, 309.335, 640.252, 28202.9, 553.926, 11383.3, 309.335, 80780.3,
     1141.42, 32669.4, 640.252, 1.62561e+08, 4.92451e+07, 1.62561e+08, 4.92451e+07, 1.49212e+07, 4.92451e+07,
     1.49212e+07, 1.62561e+08, 4.92451e+07, 1.49212e+07, 1.62561e+08, 4.92451e+07, 1.49212e+07, 1.62561e+08,
     4.92451e+07, 1.62561e+08, 4.92451e+07, 4.92451e+07, 1.49212e+07, 4.92451e+07, 1.49212e+07, 8.55031e+06,
     1.38365e+07, 8.55031e+06, 1.38365e+07, 2.23818e+07, 1.38365e+07, 2.23818e+07, 8.55031e+06, 1.38365e+07,
     2.23818e+07, 8.55031e+06, 1.38365e+07, 2.23818e+07, 8.55031e+06, 1.38365e+07, 8.55031e+06, 1.38365e+07,
     1.38365e+07, 2.23818e+07, 1.38365e+07, 2.23818e+07};


struct stiff_system {
  void operator()(const vector_type &x, vector_type &dxdt, double /* t */) {
    dxdt[0] = -k[0] * x[0];

    dxdt[1] = 2 * k[0] * x[0] - k[1] * x[1] * x[2] - k[2] * x[1] * x[3];

    dxdt[2] = -k[1] * x[1] * x[2] - k[3] * x[4] * x[2] - k[5] * x[5] * x[2] - k[7] * x[6] * x[2] - k[8] * x[7] * x[2]
        - k[9] * x[8] * x[2] - k[10] * x[9] * x[2];

    dxdt[3] = -k[2] * x[1] * x[3] - k[4] * x[4] * x[3] - k[6] * x[5] * x[3] - k[11] * x[6] * x[3] - k[12] * x[7] * x[3]
        - k[13] * x[8] * x[3] - k[14] * x[9] * x[3];

    dxdt[4] =
        k[1] * x[1] * x[2] - k[3] * x[4] * x[2] - k[4] * x[4] * x[3] - 2 * k[25] * x[4] * x[4] - k[26] * x[4] * x[5]
            - k[28] * x[4] * x[6] - k[29] * x[4] * x[7] - k[30] * x[4] * x[8] - k[31] * x[4] * x[9]
            - 2 * k[46] * x[4] * x[4] - k[47] * x[4] * x[5] - k[49] * x[4] * x[6] - k[50] * x[4] * x[7]
            - k[51] * x[4] * x[8] - k[52] * x[4] * x[9];

    dxdt[5] =
        k[2] * x[1] * x[3] - k[5] * x[5] * x[2] - k[6] * x[5] * x[3] - k[26] * x[5] * x[4] - 2 * k[27] * x[5] * x[5]
            - k[32] * x[5] * x[6] - k[33] * x[5] * x[7] - k[34] * x[5] * x[8] - k[35] * x[5] * x[9]
            - k[47] * x[5] * x[4] - 2 * k[48] * x[5] * x[5] - k[53] * x[5] * x[6] - k[54] * x[5] * x[7]
            - k[55] * x[5] * x[8] - k[56] * x[5] * x[9];

    dxdt[6] =
        k[3] * x[4] * x[2] + k[9] * x[8] * x[2] - k[11] * x[6] * x[3] - 2 * k[15] * x[6] * x[6] - k[16] * x[6] * x[7]
            - k[17] * x[6] * x[8] - k[18] * x[6] * x[9] - k[28] * x[6] * x[4] - k[32] * x[6] * x[5]
            - 2 * k[36] * x[6] * x[6] - k[37] * x[6] * x[7] - k[38] * x[6] * x[8] - k[39] * x[6] * x[9]
            - k[49] * x[6] * x[4] - k[53] * x[6] * x[5];

    dxdt[7] = k[4] * x[4] * x[3] - k[8] * x[7] * x[2] + k[11] * x[6] * x[3] - k[12] * x[7] * x[3] + k[13] * x[8] * x[3]
        - k[16] * x[6] * x[7] - 2 * k[19] * x[7] * x[7] - k[20] * x[7] * x[8] - k[21] * x[7] * x[9]
        - k[29] * x[7] * x[4] - k[33] * x[7] * x[5] - k[37] * x[7] * x[6] - 2 * k[40] * x[7] * x[7]
        - k[41] * x[7] * x[8] - k[42] * x[7] * x[9] - k[50] * x[7] * x[4] - k[54] * x[7] * x[5];

    dxdt[8] = k[5] * x[5] * x[2] + k[8] * x[7] * x[2] - k[9] * x[8] * x[2] + k[10] * x[9] * x[2] - k[13] * x[8] * x[3]
        - k[17] * x[6] * x[8] - k[20] * x[7] * x[8] - 2 * k[22] * x[8] * x[8] - k[23] * x[8] * x[9]
        - k[30] * x[8] * x[4] - k[34] * x[8] * x[5] - k[38] * x[8] * x[6] - k[41] * x[8] * x[7]
        - 2 * k[43] * x[8] * x[8] - k[44] * x[8] * x[9] - k[51] * x[8] * x[4] - k[55] * x[8] * x[5];

    dxdt[9] = k[6] * x[3] * x[5] - k[10] * x[9] * x[2] + k[12] * x[7] * x[3] - k[18] * x[6] * x[9] - k[21] * x[7] * x[9]
        - k[23] * x[8] * x[9] - 2 * k[24] * x[9] * x[9] - k[31] * x[9] * x[4] - k[35] * x[9] * x[5]
        - k[39] * x[6] * x[9] - k[42] * x[9] * x[7] - k[44] * x[9] * x[8] - 2 * k[45] * x[9] * x[9]
        - k[52] * x[9] * x[4] - k[56] * x[9] * x[5];

    dxdt[10] =
        k[15] * x[6] * x[6] + k[16] * x[6] * x[7] + k[17] * x[6] * x[8] + k[18] * x[6] * x[9] + k[19] * x[7] * x[7]
            + k[20] * x[7] * x[8] + k[21] * x[7] * x[9] + k[22] * x[8] * x[8] + k[23] * x[8] * x[9]
            + k[24] * x[9] * x[9] + k[25] * x[4] * x[4] + k[26] * x[4] * x[5] + k[27] * x[5] * x[5]
            + k[28] * x[4] * x[6] + k[29] * x[4] * x[7] + k[30] * x[4] * x[8] + k[31] * x[4] * x[9]
            + k[32] * x[5] * x[6] + k[33] * x[5] * x[7] + k[34] * x[5] * x[8] + k[35] * x[5] * x[9] + 2
            * (k[36] * x[6] * x[6] + k[37] * x[6] * x[7] + k[38] * x[6] * x[8] + k[39] * x[6] * x[9]
                + k[40] * x[7] * x[7] + k[41] * x[7] * x[8] + k[42] * x[7] * x[9] + k[43] * x[8] * x[8]
                + k[44] * x[8] * x[9] + k[45] * x[9] * x[9] + k[46] * x[4] * x[4] + k[47] * x[4] * x[5]
                + k[48] * x[5] * x[5] + k[49] * x[4] * x[6] + k[50] * x[4] * x[7] + k[51] * x[4] * x[8]
                + k[52] * x[4] * x[9] + k[53] * x[5] * x[6] + k[54] * x[5] * x[7] + k[55] * x[5] * x[8]
                + k[56] * x[5] * x[9]);
  }
};

struct stiff_system_jacobi {
  void operator()(const vector_type &x, matrix_type &J, const double & /* t */ , vector_type &dfdt) {
    J(0, 0) = -k[0];
    J(0, 1) = 0.0;
    J(0, 2) = 0.0;
    J(0, 3) = 0.0;
    J(0, 4) = 0.0;
    J(0, 5) = 0.0;
    J(0, 6) = 0.0;
    J(0, 7) = 0.0;
    J(0, 8) = 0.0;
    J(0, 9) = 0.0;
    J(0, 10) = 0.0;

    J(1, 0) = 2 * k[0];
    J(1, 1) = -k[1] * x[2] - k[2] * x[3];
    J(1, 2) = -k[1] * x[1];
    J(1, 3) = -k[2] * x[1];
    J(1, 4) = 0.0;
    J(1, 5) = 0.0;
    J(1, 6) = 0.0;
    J(1, 7) = 0.0;
    J(1, 8) = 0.0;
    J(1, 9) = 0.0;
    J(1, 10) = 0.0;

    J(2, 0) = 0;
    J(2, 1) = -k[1] * x[2];
    J(2, 2) = -k[1] * x[1] - k[3] * x[4] - k[5] * x[5] - k[7] * x[6] - k[8] * x[7] - k[9] * x[8] - k[10] * x[9];
    J(2, 3) = 0.0;
    J(2, 4) = -k[3] * x[2];
    J(2, 5) = -k[5] * x[2];
    J(2, 6) = -k[7] * x[2];
    J(2, 7) = -k[8] * x[2];
    J(2, 8) = -k[9] * x[2];
    J(2, 9) = -k[10] * x[2];
    J(2, 10) = 0.0;

    J(3, 0) = 0.0;
    J(3, 1) = -k[2] * x[3];
    J(3, 2) = 0.0;
    J(3, 3) = -k[2] * x[1] - k[4] * x[4] - k[6] * x[5] - k[11] * x[6] - k[12] * x[7] - k[13] * x[8] - k[14] * x[9];
    J(3, 4) = -k[4] * x[3];
    J(3, 5) = -k[6] * x[3];
    J(3, 6) = -k[11] * x[3];
    J(3, 7) = -k[12] * x[3];
    J(3, 8) = -k[13] * x[3];
    J(3, 9) = -k[14] * x[3];
    J(3, 10) = 0.0;

    J(4, 0) = 0.0;
    J(4, 1) = k[1] * x[2];
    J(4, 2) = k[1] * x[1] - k[3] * x[4];
    J(4, 3) = -k[4] * x[4];
    J(4, 4) = -k[3] * x[2] - k[4] * x[3] - 4 * k[25] * x[4] - k[26] * x[5] - k[28] * x[6] - k[29] * x[7] - k[30] * x[8]
        - k[31] * x[9] - 4 * k[46] * x[4] - k[47] * x[5] - k[49] * x[6] - k[50] * x[7] - k[51] * x[8] - k[52] * x[9];
    J(4, 5) = -k[26] * x[4];
    J(4, 6) = -k[28] * x[4] - k[49] * x[4];
    J(4, 7) = -k[29] * x[4] - k[50] * x[4];
    J(4, 8) = -k[30] * x[4] - k[51] * x[4];
    J(4, 9) = -k[31] * x[4] - k[52] * x[4];
    J(4, 10) = 0.0;

    J(5, 0) = 0.0;
    J(5, 1) = k[2] * x[3];
    J(5, 2) = -k[5] * x[5];
    J(5, 3) = -k[6] * x[5];
    J(5, 4) = -k[26] * x[5] - k[47] * x[5];
    J(5, 5) = -k[5] * x[2] - k[6] * x[3] - k[26] * x[4] - 4 * k[27] * x[5] - k[32] * x[6] - k[33] * x[7] - k[34] * x[8]
        - k[35] * x[9] - k[47] * x[4] - 4 * k[48] * x[5] - k[53] * x[6] - k[54] * x[7] - k[55] * x[8] - k[56] * x[9];
    J(5, 6) = -k[32] * x[5] - k[53] * x[5];
    J(5, 7) = -k[33] * x[5] - k[54] * x[5];
    J(5, 8) = -k[34] * x[5] - k[55] * x[5];
    J(5, 9) = -k[35] * x[5] - k[56] * x[5];
    J(5, 10) = 0.0;

    J(6, 0) = 0.0;
    J(6, 1) = 0.0;
    J(6, 2) = k[3] * x[4] + k[9] * x[8];
    J(6, 3) = -k[11] * x[6];
    J(6, 4) = k[3] * x[2] - k[28] * x[6] - k[49] * x[6];
    J(6, 5) = -k[32] * x[6] - k[53] * x[6];
    J(6, 6) =
        -k[11] * x[3] - 4 * k[15] * x[6] - k[16] * x[7] - k[17] * x[8] - k[18] * x[9] - k[28] * x[4] - k[32] * x[5]
            - 4 * k[36] * x[6] - k[37] * x[7] - k[38] * x[8] - k[39] * x[9] - k[49] * x[4] - k[53] * x[5];
    J(6, 7) = -k[16] * x[6] - k[37] * x[6];
    J(6, 8) = k[9] * x[2] - k[17] * x[6] - k[38] * x[6];
    J(6, 9) = -k[18] * x[6] - k[39] * x[6];
    J(6, 10) = 0.0;

    J(7, 0) = 0.0;
    J(7, 1) = 0.0;
    J(7, 2) = -k[8] * x[7];
    J(7, 3) = k[4] * x[4] + k[11] * x[6] - k[12] * x[7] + k[13] * x[8];
    J(7, 4) = k[4] * x[3] - k[29] * x[7] - k[50] * x[7];
    J(7, 5) = -k[33] * x[7] - k[54] * x[7];
    J(7, 6) = k[11] * x[3] - k[16] * x[7] - k[37] * x[7];
    J(7, 7) = -k[8] * x[2] - k[12] * x[3] - k[16] * x[6] - 4 * k[19] * x[7] - k[20] * x[8] - k[21] * x[9] - k[29] * x[4]
        - k[33] * x[5] - k[37] * x[6] - 4 * k[40] * x[7] - k[41] * x[8] - k[42] * x[9] - k[50] * x[4] - k[54] * x[5];
    J(7, 8) = k[13] * x[3] - k[20] * x[7] - k[41] * x[7];
    J(7, 9) = -k[21] * x[7] - k[42] * x[7];
    J(7, 10) = 0.0;

    J(8, 0) = 0.0;
    J(8, 1) = 0.0;
    J(8, 2) = k[5] * x[5] + k[8] * x[7] - k[9] * x[8] + k[10] * x[9];
    J(8, 3) = -k[13] * x[8];
    J(8, 4) = -k[30] * x[8] - k[51] * x[8];
    J(8, 5) = k[5] * x[2] - k[34] * x[8] - k[55] * x[8];
    J(8, 6) = -k[17] * x[8] - k[38] * x[8];
    J(8, 7) = k[8] * x[2] - k[20] * x[8] - k[41] * x[8];
    J(8, 8) = -k[9] * x[2] - k[13] * x[3] - k[17] * x[6] - k[20] * x[7] - 4 * k[22] * x[8] - k[23] * x[9] - k[30] * x[4]
        - k[34] * x[5] - k[38] * x[6] - k[41] * x[7] - 4 * k[43] * x[8] - k[44] * x[9] - k[51] * x[4] - k[55] * x[5];
    J(8, 9) = k[10] * x[2] - k[23] * x[8] - k[44] * x[8];
    J(8, 10) = 0.0;

    J(9, 0) = 0.0;
    J(9, 1) = 0.0;
    J(9, 2) = -k[10] * x[9];
    J(9, 3) = k[6] * x[5] + k[12] * x[7];
    J(9, 4) = -k[31] * x[9] - k[52] * x[9];
    J(9, 5) = k[6] * x[3] - k[35] * x[9] - k[56] * x[9];
    J(9, 6) = -k[18] * x[9] - k[39] * x[9];
    J(9, 7) = k[12] * x[3] - k[21] * x[9] - k[42] * x[9];
    J(9, 8) = -k[23] * x[9] - k[44] * x[9];
    J(9, 9) =
        -k[10] * x[2] - k[18] * x[6] - k[21] * x[7] - k[23] * x[8] - 4 * k[24] * x[9] - k[31] * x[4] - k[35] * x[5]
            - k[39] * x[6] * -k[42] * x[7] - k[44] * x[8] - 4 * k[45] * x[9] - k[52] * x[4] - k[56] * x[5];
    J(9, 10) = 0.0;

    J(0, 0) = 0.0;
    J(10, 1) = 0.0;
    J(10, 2) = 0.0;
    J(10, 3) = 0.0;
    J(10, 4) = 2 * k[25] * x[4] + k[26] * x[5] + k[28] * x[6] + k[29] * x[7] + k[30] * x[8] + k[31] * x[9]
        + 2 * (2 * k[46] * x[4] + k[47] * x[5] + k[49] * x[6] + k[50] * x[7] + k[51] * x[8] + k[52] * x[9]);
    J(10, 5) = k[26] * x[4] + 2 * k[27] * x[5] + k[32] * x[6] + k[33] * x[7] + k[34] * x[8] + k[35] * x[9]
        + 2 * (k[47] * x[4] + 2 * k[48] * x[5] + k[53] * x[6] + k[54] * x[7] + k[55] * x[8] + k[56] * x[9]);
    J(10, 6) = 2 * k[15] * x[6] + k[16] * x[7] + k[17] * x[8] + k[18] * x[9] + k[28] * x[4] + k[32] * x[5]
        + 2 * (2 * k[36] * x[6] + k[37] * x[7] + k[38] * x[8] + k[39] * x[9] + k[49] * x[4] + k[53] * x[5]);
    J(10, 7) = k[16] * x[6] + 2 * k[19] * x[7] + k[20] * x[8] + k[21] * x[9] + k[29] * x[4] + k[33] * x[5]
        + 2 * (k[37] * x[6] + 2 * k[40] * x[7] + k[41] * x[8] + k[42] * x[9] + k[50] * x[4] + k[54] * x[5]);
    J(10, 8) = k[17] * x[6] + k[20] * x[7] + 2 * k[22] * x[8] + k[23] * x[9] + k[30] * x[4] + k[34] * x[5]
        + 2 * (k[38] * x[6] + k[41] * x[7] + 2 * k[43] * x[8] + k[44] * x[9] + k[51] * x[4] + k[55] * x[5]);
    J(10, 9) = k[18] * x[6] + k[21] * x[7] + k[23] * x[8] + 2 * k[24] * x[9] + k[31] * x[4] + k[35] * x[5]
        + 2 * (k[39] * x[6] + k[42] * x[7] + k[44] * x[8] + 2 * k[45] * x[9] + k[52] * x[4] + k[56] * x[5]);
    J(10, 10) = 0.0;
    dfdt[0] = 0.0;
    dfdt[1] = 0.0;
    dfdt[2] = 0.0;
    dfdt[3] = 0.0;
    dfdt[4] = 0.0;
    dfdt[5] = 0.0;
    dfdt[6] = 0.0;
    dfdt[7] = 0.0;
    dfdt[8] = 0.0;
    dfdt[9] = 0.0;
    dfdt[10] = 0.0;
  }
};
//]



void ode(stiff_system,stiff_system_jacobi,vector_type &r,double end_t)
{


    std::string out_dir = "/Users/yueyue/Desktop/effPropaRecorder/effPropaRecorder/output/";

    //double start_t=0.0;

    //double dt_t=5.0;
    vector_type x(11);
    x=r;
    //cout<<r[0]<<endl;

   ofstream t1(out_dir+"ode_data.out");
   size_t num_of_steps = integrate_const( make_dense_output< rosenbrock4< double > >( 1.0e-6 , 1.0e-6 ) ,
                                           make_pair( stiff_system() , stiff_system_jacobi() ) ,
                                           x , 0.0 , end_t , 10.0 ,
                                          t1 << phoenix::arg_names::arg2 << " "  << phoenix::arg_names::arg1[0] << " "<< phoenix::arg_names::arg1[1]<< " " << phoenix::arg_names::arg1[2] << " " << phoenix::arg_names::arg1[3] << " " << phoenix::arg_names::arg1[4] << " " << phoenix::arg_names::arg1[5] << " " << phoenix::arg_names::arg1[6] << " " << phoenix::arg_names::arg1[7] << " " << phoenix::arg_names::arg1[8] << " " << phoenix::arg_names::arg1[9]  << " " << phoenix::arg_names::arg1[10] <<"\n" );

    r=x;

   //cout<< phoenix::arg_names::arg1[0]<<endl;



}
